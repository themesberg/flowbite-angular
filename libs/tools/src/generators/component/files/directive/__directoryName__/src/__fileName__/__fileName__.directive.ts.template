import { injectFlowbite<%= className %>Config } from '../config/<%= fileName %>-config';
import { flowbite<%= className %>State, provideFlowbite<%= className %>State } from './<%= fileName %>-state';

import { mergeDeep } from 'flowbite-angular';

import { Directive, computed, input } from '@angular/core';
import { twMerge } from 'tailwind-merge';

@Directive({
  standalone: true,
  selector: `
    [flowbite<%= className %>]
  `,
  exportAs: 'flowbite<%= className %>',
  hostDirectives: [],
  providers: [provideFlowbite<%= className %>State()],
  host: { '[class]': `theme().host.root` },
})
export class Flowbite<%= className %> {
  readonly config = injectFlowbite<%= className %>Config();

  /**
   * @see {@link injectFlowbite<%= className %>Config}
   */
  readonly customTheme = input(this.config.customTheme);

  readonly theme = computed(() => {
    const mergedTheme = mergeDeep(this.config.baseTheme, this.state.customTheme());

    return {
      host: {
        root: twMerge(mergedTheme.host.base),
      },
    };
  });

  /**
   * @internal
   */
  readonly state = flowbite<%= className %>State<Flowbite<%= className %>>(this);
}